import argparse
import pathlib
from conf import default, general, paths
import os
import numpy as np
from sklearn.metrics import f1_score, confusion_matrix
from skimage.morphology import area_opening
import pandas as pd
from itertools import repeat
from multiprocessing import Pool, freeze_support
import matplotlib.pyplot as plt
from tqdm import tqdm

parser = argparse.ArgumentParser(
    description='Evaluate mAP of the models\' predictions'
)

parser.add_argument( # Experiment number
    '-e', '--experiment',
    type = int,
    default = 1,
    help = 'The number of the experiment'
)


parser.add_argument( # Number of models to be trained
    '-n', '--number-models',
    type = int,
    default = default.N_TRAIN_MODELS,
    help = 'The number models to be trained from the scratch'
)

parser.add_argument( # Experiment path
    '-x', '--experiments-path',
    type = pathlib.Path,
    default = paths.EXPERIMENTS_PATH,
    help = 'The patch to data generated by all experiments'
)

args = parser.parse_args()

exp_path = os.path.join(str(args.experiments_path), f'exp_{args.experiment}')
if not os.path.exists(exp_path):
    os.mkdir(exp_path)

logs_path = os.path.join(exp_path, f'logs')
models_path = os.path.join(exp_path, f'models')
visual_path = os.path.join(exp_path, f'visual')
predicted_path = os.path.join(exp_path, f'predicted')
results_path = os.path.join(exp_path, f'results')


def prec_recall_curve(threshold, pred_prob, label):
    pred_bin = np.zeros_like(pred_prob, dtype=np.uint8)
    pred_bin[pred_prob >= threshold] = 1
    pred_removed = pred_bin -  area_opening(pred_bin, 625)
    label[pred_removed == 1] = 2
    del pred_removed

    keep_idx = label.flatten() != 2

    pred_eval = pred_bin.flatten()[keep_idx]
    label_eval = label.flatten()[keep_idx]

    del keep_idx

    tn, fp, fn, tp = confusion_matrix(label_eval, pred_eval).ravel()

    prec = tp / (tp + fp)
    recall = tp / (tp + fn)
    acc = (tp + tn) / (tp + tn + fp + fn)

    return recall, prec, acc

def complete_nan_values(curve):
    vec_prec = curve[:,0]
    for j in reversed(range(len(vec_prec))):
        if np.isnan(vec_prec[j]):
            vec_prec[j] = vec_prec[j+1]

    vec_rec = curve[:,1]
    for j in (range(len(vec_rec))):
        if np.isnan(vec_rec[j]):
            vec_rec[j] = vec_rec[j-1]
    curve[:,1] = vec_rec
    return curve 


if __name__=="__main__":
    freeze_support()

    label = np.load(os.path.join(paths.PREPARED_PATH, f'{general.LABEL_PREFIX}_{general.YEAR_2}.npy'))
    preds_files = os.listdir(predicted_path)

    exps = []
    maps = []

    for pred_file in tqdm(preds_files, desc = 'Generating mAP metrics'):

        pred_idx = pred_file.split('_')[1].split('.')[0]
        exps.append(f'Exp {pred_idx}')
        pred_prob = np.load(os.path.join(predicted_path, pred_file))[:,:,1]

        thresholds = np.linspace(pred_prob.min(), pred_prob.max(), num=50)
        
        with Pool(processes=general.N_MAP_EVAL_PROCESSES) as pool:
            curve = pool.starmap(prec_recall_curve, zip(thresholds, repeat(pred_prob), repeat(label)))
            curve = np.array(curve)
            np.save(os.path.join(results_path, f'curve_{args.experiment}_{pred_idx}.npy'), curve)
            curve = complete_nan_values(curve)
            prec = curve[:,0]
            recall = curve[:,1]

            recall_ = np.insert(recall, 0, 0)
            prec_ = np.insert(prec, 0, prec[0])
            deltaR = recall_[1:]-recall_[:-1]
            m_prec_ = (prec_[1:] + prec_[:-1])/2
            AP = np.sum(m_prec_*deltaR)

            maps.append(AP)

            plt.figure(figsize=(10,10))
            plt.plot(curve[:,1],curve[:,0], 'b-', label = f'FUSION (AP: {AP:.4f})')
            plt.legend(loc="lower left")
            ax = plt.gca()
            ax.set_ylim([0,1.01])
            ax.set_xlim([0,1.01])
            plt.grid()
            plt.savefig(os.path.join(results_path, f'result_{args.experiment}_{pred_idx}.png'))

            

    pd.DataFrame({
        'Exp': exps,
        'mAP': maps
    }).to_excel(os.path.join(results_path, f'map_{args.experiment}.xlsx'))
            
